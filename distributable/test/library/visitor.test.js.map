{"version":3,"sources":["../../../source/test/library/visitor.test.js"],"names":["createRequire","CreateRequire","DefaultBabel","ModuleBabel","Test","Babel","Require","import","meta","url","beforeEach","test","context","option","resolve","codeIn","expectedCodeOut","code","actualCodeOut","transformAsync","is"],"mappings":"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","sourcesContent":["import { createRequire as CreateRequire } from 'module'\nimport DefaultBabel, * as ModuleBabel from '@babel/core'\nimport Test from 'ava'\n\nconst Babel = DefaultBabel || ModuleBabel\nconst Require = CreateRequire(import.meta.url)\n\nTest.beforeEach((test) => {\n\n  test.context.option = { \n    'plugins': [ \n      [\n        Require.resolve('../../index.cjs'),\n        {\n          'rule': [\n            {\n              'searchFor': /^(\\.{1,2}\\/.*?)\\.js$/gi,\n              'replaceWith': '$1.cjs'\n            }\n          ]\n        }      \n      ]\n    ]\n  }\n  \n})\n\nTest('import', async (test) => {\n\n  let codeIn = 'import { abc } from \\'./abc.js\\''\n  let expectedCodeOut = 'import { abc } from \"./abc.cjs\";'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('import(...)', async (test) => {\n\n  let codeIn = 'const abcPromise = import(\\'./abc.js\\')'\n  let expectedCodeOut = 'const abcPromise = import(\"./abc.cjs\");'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('require(...)', async (test) => {\n\n  let codeIn = 'const abc = require(\\'./abc.js\\')'\n  let expectedCodeOut = 'const abc = require(\"./abc.cjs\");'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('let', async (test) => {\n\n  let codeIn = 'let abc = \\'./abc.js\\''\n  let expectedCodeOut = 'let abc = \"./abc.cjs\";'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('let ...', async (test) => {\n\n  let codeIn = 'let abc = \\'./ab\\' + \\'c.js\\''\n  let expectedCodeOut = 'let abc = \\'./ab\\' + \\'c.js\\';'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('console.log(...)', async (test) => {\n\n  let codeIn = 'console.log(\\'Here at ./abc.js and there at ./def.js\\')'\n  let expectedCodeOut = 'console.log(\\'Here at ./abc.js and there at ./def.js\\');'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('fs.readFileAsync(...)', async (test) => {\n\n  let codeIn = 'fs.readFileAsync(\\'./abc.json\\')'\n  let expectedCodeOut = 'fs.readFileAsync(\\'./abc.json\\');'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n"],"file":"visitor.test.js"}