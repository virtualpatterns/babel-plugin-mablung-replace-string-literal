{"version":3,"sources":["../../../source/test/library/visitor.test.js"],"names":[],"mappings":"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","file":"visitor.test.js","sourcesContent":["import { createRequire as CreateRequire } from 'module'\nimport Babel from '@babel/core'\nimport Test from 'ava'\n\nconst Require = CreateRequire(import.meta.url)\n\nTest.beforeEach((test) => {\n\n  test.context.option = { \n    'plugins': [ \n      [\n        Require.resolve('../../index.cjs'),\n        {\n          'rule': [\n            {\n              'searchFor': /^(\\.{1,2}\\/.*?)\\.js$/gi,\n              'replaceWith': '$1.cjs'\n            }\n          ]\n        }      \n      ]\n    ]\n  }\n  \n})\n\nTest('import', async (test) => {\n\n  let codeIn = 'import { abc } from \\'./abc.js\\''\n  let expectedCodeOut = 'import { abc } from \"./abc.cjs\";'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('import(...)', async (test) => {\n\n  let codeIn = 'const abcPromise = import(\\'./abc.js\\')'\n  let expectedCodeOut = 'const abcPromise = import(\"./abc.cjs\");'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('require(...)', async (test) => {\n\n  let codeIn = 'const abc = require(\\'./abc.js\\')'\n  let expectedCodeOut = 'const abc = require(\"./abc.cjs\");'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('let', async (test) => {\n\n  let codeIn = 'let abc = \\'./abc.js\\''\n  let expectedCodeOut = 'let abc = \"./abc.cjs\";'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('let ...', async (test) => {\n\n  let codeIn = 'let abc = \\'./ab\\' + \\'c.js\\''\n  let expectedCodeOut = 'let abc = \\'./ab\\' + \\'c.js\\';'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('console.log(...)', async (test) => {\n\n  let codeIn = 'console.log(\\'Here at ./abc.js and there at ./def.js\\')'\n  let expectedCodeOut = 'console.log(\\'Here at ./abc.js and there at ./def.js\\');'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n\nTest('fs.readFileAsync(...)', async (test) => {\n\n  let codeIn = 'fs.readFileAsync(\\'./abc.json\\')'\n  let expectedCodeOut = 'fs.readFileAsync(\\'./abc.json\\');'\n\n  let { code: actualCodeOut } = await Babel.transformAsync(codeIn, test.context.option)\n\n  test.is(actualCodeOut, expectedCodeOut)\n\n})\n"]}